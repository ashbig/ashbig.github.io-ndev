install.packages("igraph")
library(igraph)
library(tidyr)
library(dplyr)
# Read in the clinical data. Split and remove NA ICD-10 codes
phi <- read.table('/Users/ash/Desktop/network_dev/ClinicalSamples.txt', sep ="\t",  header = FALSE, stringsAsFactors = FALSE, fill = TRUE, quote ="", na.strings ="NA")
phi <- separate_rows(phi, V6)
phi <- phi[!(is.na(phi$V6) | phi$V6==""),]
#Extract only what we want to network
icd <- subset(phi, select=c("V6", "V11"))
names(icd) <- c("ICD", "CPDID")
# Read in mutations and remove empty c changes and non-clincal data
muts <- read.table('/Users/ash/Desktop/network_devReportedVariants.txt', sep ="\t",  header = FALSE, stringsAsFactors = FALSE, fill = TRUE, quote ="", na.strings ="NA")
# p.change is too difficult right now (this table is ridiculous)
#muts <- muts[!(is.na(muts$V12) | muts$V12=="" | muts$V12=="p.?" | muts$V12=="AMP" | muts$V12=="?" | !startsWith(muts$V12, "p.")), ]
muts <- muts[!(is.na(muts$V11) | muts$V11=="" | !startsWith(muts$V22, "CPDC") | !startsWith(muts$V12, "p.")), ]
sub_muts <- subset(muts, select=c("V12", "V8", "V22", "V23"))
names(sub_muts) <- c("CHANGE", "GENE", "CPDID", "CATEGORY")
# lets join the two data frames
net1 <- merge(x = icd, y = sub_muts, by.x="CPDID")
# get non-duplicated changes
n_occur <- data.frame(table(net1$CHANGE))
freq <- n_occur[n_occur$Freq > 3 & n_occur$Freq < 1000,]
#multi_hits <- subset(net1, CHANGE %in% freq$VAR1)
multi_hits <- net1 %>% filter(CHANGE %in% freq$Var1)
icd_gene <- subset(multi_hits, select = c("ICD", "GENE"))
icd_pchange <- icd_gene <- subset(multi_hits, select = c("ICD", "CHANGE"))
V(g)$label.color <- "black" ##ifelse(V(g)$type, "black", "white")
## V(g)$label.font <-  2
V(g)$label.cex <- 1 ##ifelse(V(g)$type, 0.8, 1.2)
## V(g)$label.dist <-0
V(g)$frame.color <-  "gray"
V(g)$size <- 18
g <- graph.data.frame(icd_gene, directed=F)
V(g)$type <- bipartite_mapping(g)$type
types <- V(g)$type                 ## getting each vertex `type` let's us sort easily
deg <- degree(g)
bet <- betweenness(g)
clos <- closeness(g)
eig <- eigen_centrality(g)$vector
cent_df <- data.frame(types, deg, bet, clos, eig)
cent_df[order(cent_df$type, decreasing = TRUE),] ## sort w/ `order` by `type`
icd_gene2 <- icd_gene[icd_gene$ICD=="131.3" | icd_gene$ICD=="178.1" | icd_gene$ICD=="C72.0" | icd_gene$ICD=="212.6" | icd_gene$ICD=="189.0" | icd_gene$ICD=="C48.2", ]
g <- graph.data.frame(icd_gene2, directed=F)
V(g)$type <- bipartite_mapping(g)$type
V(g)$color <- ifelse(V(g)$type, "lightblue", "salmon")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "lightgray"
plot(g, layout=layout.bipartite, vertex.size=7, vertex.label.cex=0.6)
plot(g, vertex.label.cex = 0.8, vertex.label.color = "black")
library(igraph)
library(tidyr)
library(dplyr)
# Read in the clinical data. Split and remove NA ICD-10 codes
phi <- read.table('/Users/ash/Desktop/network_dev/ClinicalSamples.txt', sep ="\t",  header = FALSE, stringsAsFactors = FALSE, fill = TRUE, quote ="", na.strings ="NA")
phi <- separate_rows(phi, V6)
phi <- phi[!(is.na(phi$V6) | phi$V6==""),]
#Extract only what we want to network
icd <- subset(phi, select=c("V6", "V11"))
names(icd) <- c("ICD", "CPDID")
# Read in mutations and remove empty c changes and non-clincal data
muts <- read.table('/Users/ash/Desktop/network_devReportedVariants.txt', sep ="\t",  header = FALSE, stringsAsFactors = FALSE, fill = TRUE, quote ="", na.strings ="NA")
# p.change is too difficult right now (this table is ridiculous)
#muts <- muts[!(is.na(muts$V12) | muts$V12=="" | muts$V12=="p.?" | muts$V12=="AMP" | muts$V12=="?" | !startsWith(muts$V12, "p.")), ]
muts <- muts[!(is.na(muts$V11) | muts$V11=="" | !startsWith(muts$V22, "CPDC") | !startsWith(muts$V12, "p.")), ]
sub_muts <- subset(muts, select=c("V12", "V8", "V22", "V23"))
names(sub_muts) <- c("CHANGE", "GENE", "CPDID", "CATEGORY")
muts <- read.table('/Users/ash/Desktop/network_dev/ReportedVariants.txt', sep ="\t",  header = FALSE, stringsAsFactors = FALSE, fill = TRUE, quote ="", na.strings ="NA")
# p.change is too difficult right now (this table is ridiculous)
#muts <- muts[!(is.na(muts$V12) | muts$V12=="" | muts$V12=="p.?" | muts$V12=="AMP" | muts$V12=="?" | !startsWith(muts$V12, "p.")), ]
muts <- muts[!(is.na(muts$V11) | muts$V11=="" | !startsWith(muts$V22, "CPDC") | !startsWith(muts$V12, "p.")), ]
sub_muts <- subset(muts, select=c("V12", "V8", "V22", "V23"))
names(sub_muts) <- c("CHANGE", "GENE", "CPDID", "CATEGORY")
# lets join the two data frames
net1 <- merge(x = icd, y = sub_muts, by.x="CPDID")
# get non-duplicated changes
n_occur <- data.frame(table(net1$CHANGE))
freq <- n_occur[n_occur$Freq > 3 & n_occur$Freq < 1000,]
#multi_hits <- subset(net1, CHANGE %in% freq$VAR1)
multi_hits <- net1 %>% filter(CHANGE %in% freq$Var1)
icd_gene <- subset(multi_hits, select = c("ICD", "GENE"))
icd_pchange <- icd_gene <- subset(multi_hits, select = c("ICD", "CHANGE"))
V(g)$label.color <- "black" ##ifelse(V(g)$type, "black", "white")
## V(g)$label.font <-  2
V(g)$label.cex <- 1 ##ifelse(V(g)$type, 0.8, 1.2)
## V(g)$label.dist <-0
V(g)$frame.color <-  "gray"
V(g)$size <- 18
g <- graph.data.frame(icd_gene, directed=F)
V(g)$type <- bipartite_mapping(g)$type
types <- V(g)$type                 ## getting each vertex `type` let's us sort easily
deg <- degree(g)
bet <- betweenness(g)
clos <- closeness(g)
eig <- eigen_centrality(g)$vector
cent_df <- data.frame(types, deg, bet, clos, eig)
cent_df[order(cent_df$type, decreasing = TRUE),] ## sort w/ `order` by `type`
icd_gene2 <- icd_gene[icd_gene$ICD=="131.3" | icd_gene$ICD=="178.1" | icd_gene$ICD=="C72.0" | icd_gene$ICD=="212.6" | icd_gene$ICD=="189.0" | icd_gene$ICD=="C48.2", ]
g <- graph.data.frame(icd_gene2, directed=F)
V(g)$type <- bipartite_mapping(g)$type
V(g)$color <- ifelse(V(g)$type, "lightblue", "salmon")
V(g)$shape <- ifelse(V(g)$type, "circle", "square")
E(g)$color <- "lightgray"
plot(g, layout=layout.bipartite, vertex.size=7, vertex.label.cex=0.6)
plot(g, vertex.label.cex = 0.8, vertex.label.color = "black")
